{"meta":{"title":"Gilgamesh","subtitle":null,"description":"Life Of Konjac","author":"James","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"Codeforce 540B School Marks （贪心）No.6","slug":"06_540B","date":"2018-08-26T12:53:49.848Z","updated":"2018-08-26T12:54:56.272Z","comments":true,"path":"2018/08/26/06_540B/","link":"","permalink":"http://yoursite.com/2018/08/26/06_540B/","excerpt":"","text":"School Marks传送Little Vova studies programming in an elite school. Vova and his classmates are supposed to write n progress tests, for each test they will get a mark from 1 to p. Vova is very smart and he can write every test for any mark, but he doesn’t want to stand out from the crowd too much. If the sum of his marks for all tests exceeds value x, then his classmates notice how smart he is and start distracting him asking to let them copy his homework. And if the median of his marks will be lower than y points (the definition of a median is given in the notes), then his mom will decide that he gets too many bad marks and forbid him to play computer games. Vova has already wrote k tests and got marks a1, …, ak. He doesn’t want to get into the first or the second situation described above and now he needs to determine which marks he needs to get for the remaining tests. Help him do that. InputThe first line contains 5 space-separated integers: n, k, p, x and y (1 ≤ n ≤ 999, n is odd, 0 ≤ k &lt; n, 1 ≤ p ≤ 1000, n ≤ x ≤ n·p, 1 ≤ y ≤ p). Here n is the number of tests that Vova is planned to write, k is the number of tests he has already written, p is the maximum possible mark for a test, x is the maximum total number of points so that the classmates don’t yet disturb Vova, y is the minimum median point so that mom still lets him play computer games. The second line contains k space-separated integers: a1, …, ak (1 ≤ ai ≤ p) — the marks that Vova got for the tests he has already written. OutputIf Vova cannot achieve the desired result, print “-1”. Otherwise, print n - k space-separated integers — the marks that Vova should get for the remaining tests. If there are multiple possible solutions, print any of them. Examplesinput5 3 5 18 43 5 4output4 1input5 3 5 16 45 5 5output-1 NoteThe median of sequence a1, …, an where n is odd (in this problem n is always odd) is the element staying on (n + 1) / 2 position in the sorted list of ai. In the first sample the sum of marks equals 3 + 5 + 4 + 4 + 1 = 17, what doesn’t exceed 18, that means that Vova won’t be disturbed by his classmates. And the median point of the sequence {1, 3, 4, 4, 5} equals to 4, that isn’t less than 4, so his mom lets him play computer games. Please note that you do not have to maximize the sum of marks or the median mark. Any of the answers: “4 2”, “2 4”, “5 1”, “1 5”, “4 1”, “1 4” for the first test is correct. In the second sample Vova got three ‘5’ marks, so even if he gets two ‘1’ marks, the sum of marks will be 17, that is more than the required value of 16. So, the answer to this test is “-1”. 题目大意：绫小路清隆是个默默无闻的大神，他每次考试都能控制自己的分数1~p。一学期一共n次考试，已经考了k次。他如果总分超过x那他就会被同学关注，如果他所有考试成绩的中位数小于y，那他就会被他妈谈人生。路哥想一直保持默默无闻，请问他剩下的考试应该考多少分？（给出一种解，无解输出-1） 做法：在保证中位数不低于y的情况下尽可能的考1分所以当中位数小于y时考y分当中位数大于等于y时考1分最后判断合法性不合法输出-1 12345678910111213141516171819202122232425262728293031323334353637383940414243#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;using namespace std;int n,k,p,x,y,sum,cnt;int a[10010],ans[10010]; int read()&#123; int res=0,w=1;char ch=getchar(); while(!isdigit(ch)&amp;&amp;ch!='-') ch=getchar(); if(ch=='-') w=-1,ch=getchar(); while(isdigit(ch)) res=res*10+ch-'0',ch=getchar(); return res*w; &#125;int main()&#123; n=read();k=read();p=read();x=read();y=read(); for(int i=1;i&lt;=k;i++)&#123; a[i]=read(); sum+=a[i]; &#125; sort(a+1,a+1+k); for(int i=k+1;i&lt;=n;i++)&#123; if(a[i/2]&gt;=y)&#123; ans[++cnt]=1; a[i]=1; sum+=1; &#125; else&#123; ans[++cnt]=y; a[i]=y; sum+=y; &#125; sort(a+1,a+1+i); &#125; if(sum&gt;x||a[n/2+1]&lt;y)&#123; cout&lt;&lt;\"-1\"&lt;&lt;\" \"; &#125; else&#123; for(int i=1;i&lt;=cnt;i++)&#123; cout&lt;&lt;ans[i]&lt;&lt;\" \"; &#125; &#125; return 0;&#125;","categories":[],"tags":[]},{"title":"Codeforce 535B Tavas and SaDDas (打表） No.5","slug":"05_535B","date":"2018-08-26T10:38:53.938Z","updated":"2018-08-26T10:38:35.275Z","comments":true,"path":"2018/08/26/05_535B/","link":"","permalink":"http://yoursite.com/2018/08/26/05_535B/","excerpt":"","text":"Tavas and SaDDas传送Once again Tavas started eating coffee mix without water! Keione told him that it smells awful, but he didn’t stop doing that. That’s why Keione told his smart friend, SaDDas to punish him! SaDDas took Tavas’ headphones and told him: “If you solve the following problem, I’ll return it to you.” The problem is: You are given a lucky number n. Lucky numbers are the positive integers whose decimal representations contain only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not. If we sort all lucky numbers in increasing order, what’s the 1-based index of n? Tavas is not as smart as SaDDas, so he asked you to do him a favor and solve this problem so he can have his headphones back. InputThe first and only line of input contains a lucky number n (1 ≤ n ≤ 109). OutputPrint the index of n among all lucky numbers. Examplesinput 4 output 1 input 7 output 2 input 77 output 6 题目大意：只有4或7的数被称之为幸运数 询问n以内的幸运数有几个 做法：发挥NOIP的优良习惯打表 用一个数组储存所有10^9以内的幸运数然后在n搜索就好 数组序号就是其个数 代码：打表代码： 123456789101112131415161718192021#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;int n,ans,t;bool check(int x)&#123; while(x&gt;10)&#123; t=x%10;x/=10; if(t!=7&amp;&amp;t!=4) return 0; &#125; if(x!=7&amp;&amp;x!=4) return 0; else return 1;&#125;int main()&#123;// freopen(\"a.txt\",\"w\",stdout); for(int i=1;i&lt;=1000000000;i++)&#123; if(check(i)) ans++,cout&lt;&lt;i&lt;&lt;\",\"; &#125; cout&lt;&lt;endl; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; 提交代码： 123456789101112#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;int a[2000]=&#123;0,4,7,44,47,74,77,444,447,474,477,744,747,774,777,4444,4447,4474,4477,4744,4747,4774,4777,7444,7447,7474,7477,7744,7747,7774,7777,44444,44447,44474,44477,44744,44747,44774,44777,47444,47447,47474,47477,47744,47747,47774,47777,74444,74447,74474,74477,74744,74747,74774,74777,77444,77447,77474,77477,77744,77747,77774,77777,444444,444447,444474,444477,444744,444747,444774,444777,447444,447447,447474,447477,447744,447747,447774,447777,474444,474447,474474,474477,474744,474747,474774,474777,477444,477447,477474,477477,477744,477747,477774,477777,744444,744447,744474,744477,744744,744747,744774,744777,747444,747447,747474,747477,747744,747747,747774,747777,774444,774447,774474,774477,774744,774747,774774,774777,777444,777447,777474,777477,777744,777747,777774,777777,4444444,4444447,4444474,4444477,4444744,4444747,4444774,4444777,4447444,4447447,4447474,4447477,4447744,4447747,4447774,4447777,4474444,4474447,4474474,4474477,4474744,4474747,4474774,4474777,4477444,4477447,4477474,4477477,4477744,4477747,4477774,4477777,4744444,4744447,4744474,4744477,4744744,4744747,4744774,4744777,4747444,4747447,4747474,4747477,4747744,4747747,4747774,4747777,4774444,4774447,4774474,4774477,4774744,4774747,4774774,4774777,4777444,4777447,4777474,4777477,4777744,4777747,4777774,4777777,7444444,7444447,7444474,7444477,7444744,7444747,7444774,7444777,7447444,7447447,7447474,7447477,7447744,7447747,7447774,7447777,7474444,7474447,7474474,7474477,7474744,7474747,7474774,7474777,7477444,7477447,7477474,7477477,7477744,7477747,7477774,7477777,7744444,7744447,7744474,7744477,7744744,7744747,7744774,7744777,7747444,7747447,7747474,7747477,7747744,7747747,7747774,7747777,7774444,7774447,7774474,7774477,7774744,7774747,7774774,7774777,7777444,7777447,7777474,7777477,7777744,7777747,7777774,7777777,44444444,44444447,44444474,44444477,44444744,44444747,44444774,44444777,44447444,44447447,44447474,44447477,44447744,44447747,44447774,44447777,44474444,44474447,44474474,44474477,44474744,44474747,44474774,44474777,44477444,44477447,44477474,44477477,44477744,44477747,44477774,44477777,44744444,44744447,44744474,44744477,44744744,44744747,44744774,44744777,44747444,44747447,44747474,44747477,44747744,44747747,44747774,44747777,44774444,44774447,44774474,44774477,44774744,44774747,44774774,44774777,44777444,44777447,44777474,44777477,44777744,44777747,44777774,44777777,47444444,47444447,47444474,47444477,47444744,47444747,47444774,47444777,47447444,47447447,47447474,47447477,47447744,47447747,47447774,47447777,47474444,47474447,47474474,47474477,47474744,47474747,47474774,47474777,47477444,47477447,47477474,47477477,47477744,47477747,47477774,47477777,47744444,47744447,47744474,47744477,47744744,47744747,47744774,47744777,47747444,47747447,47747474,47747477,47747744,47747747,47747774,47747777,47774444,47774447,47774474,47774477,47774744,47774747,47774774,47774777,47777444,47777447,47777474,47777477,47777744,47777747,47777774,47777777,74444444,74444447,74444474,74444477,74444744,74444747,74444774,74444777,74447444,74447447,74447474,74447477,74447744,74447747,74447774,74447777,74474444,74474447,74474474,74474477,74474744,74474747,74474774,74474777,74477444,74477447,74477474,74477477,74477744,74477747,74477774,74477777,74744444,74744447,74744474,74744477,74744744,74744747,74744774,74744777,74747444,74747447,74747474,74747477,74747744,74747747,74747774,74747777,74774444,74774447,74774474,74774477,74774744,74774747,74774774,74774777,74777444,74777447,74777474,74777477,74777744,74777747,74777774,74777777,77444444,77444447,77444474,77444477,77444744,77444747,77444774,77444777,77447444,77447447,77447474,77447477,77447744,77447747,77447774,77447777,77474444,77474447,77474474,77474477,77474744,77474747,77474774,77474777,77477444,77477447,77477474,77477477,77477744,77477747,77477774,77477777,77744444,77744447,77744474,77744477,77744744,77744747,77744774,77744777,77747444,77747447,77747474,77747477,77747744,77747747,77747774,77747777,77774444,77774447,77774474,77774477,77774744,77774747,77774774,77774777,77777444,77777447,77777474,77777477,77777744,77777747,77777774,77777777,444444444,444444447,444444474,444444477,444444744,444444747,444444774,444444777,444447444,444447447,444447474,444447477,444447744,444447747,444447774,444447777,444474444,444474447,444474474,444474477,444474744,444474747,444474774,444474777,444477444,444477447,444477474,444477477,444477744,444477747,444477774,444477777,444744444,444744447,444744474,444744477,444744744,444744747,444744774,444744777,444747444,444747447,444747474,444747477,444747744,444747747,444747774,444747777,444774444,444774447,444774474,444774477,444774744,444774747,444774774,444774777,444777444,444777447,444777474,444777477,444777744,444777747,444777774,444777777,447444444,447444447,447444474,447444477,447444744,447444747,447444774,447444777,447447444,447447447,447447474,447447477,447447744,447447747,447447774,447447777,447474444,447474447,447474474,447474477,447474744,447474747,447474774,447474777,447477444,447477447,447477474,447477477,447477744,447477747,447477774,447477777,447744444,447744447,447744474,447744477,447744744,447744747,447744774,447744777,447747444,447747447,447747474,447747477,447747744,447747747,447747774,447747777,447774444,447774447,447774474,447774477,447774744,447774747,447774774,447774777,447777444,447777447,447777474,447777477,447777744,447777747,447777774,447777777,474444444,474444447,474444474,474444477,474444744,474444747,474444774,474444777,474447444,474447447,474447474,474447477,474447744,474447747,474447774,474447777,474474444,474474447,474474474,474474477,474474744,474474747,474474774,474474777,474477444,474477447,474477474,474477477,474477744,474477747,474477774,474477777,474744444,474744447,474744474,474744477,474744744,474744747,474744774,474744777,474747444,474747447,474747474,474747477,474747744,474747747,474747774,474747777,474774444,474774447,474774474,474774477,474774744,474774747,474774774,474774777,474777444,474777447,474777474,474777477,474777744,474777747,474777774,474777777,477444444,477444447,477444474,477444477,477444744,477444747,477444774,477444777,477447444,477447447,477447474,477447477,477447744,477447747,477447774,477447777,477474444,477474447,477474474,477474477,477474744,477474747,477474774,477474777,477477444,477477447,477477474,477477477,477477744,477477747,477477774,477477777,477744444,477744447,477744474,477744477,477744744,477744747,477744774,477744777,477747444,477747447,477747474,477747477,477747744,477747747,477747774,477747777,477774444,477774447,477774474,477774477,477774744,477774747,477774774,477774777,477777444,477777447,477777474,477777477,477777744,477777747,477777774,477777777,744444444,744444447,744444474,744444477,744444744,744444747,744444774,744444777,744447444,744447447,744447474,744447477,744447744,744447747,744447774,744447777,744474444,744474447,744474474,744474477,744474744,744474747,744474774,744474777,744477444,744477447,744477474,744477477,744477744,744477747,744477774,744477777,744744444,744744447,744744474,744744477,744744744,744744747,744744774,744744777,744747444,744747447,744747474,744747477,744747744,744747747,744747774,744747777,744774444,744774447,744774474,744774477,744774744,744774747,744774774,744774777,744777444,744777447,744777474,744777477,744777744,744777747,744777774,744777777,747444444,747444447,747444474,747444477,747444744,747444747,747444774,747444777,747447444,747447447,747447474,747447477,747447744,747447747,747447774,747447777,747474444,747474447,747474474,747474477,747474744,747474747,747474774,747474777,747477444,747477447,747477474,747477477,747477744,747477747,747477774,747477777,747744444,747744447,747744474,747744477,747744744,747744747,747744774,747744777,747747444,747747447,747747474,747747477,747747744,747747747,747747774,747747777,747774444,747774447,747774474,747774477,747774744,747774747,747774774,747774777,747777444,747777447,747777474,747777477,747777744,747777747,747777774,747777777,774444444,774444447,774444474,774444477,774444744,774444747,774444774,774444777,774447444,774447447,774447474,774447477,774447744,774447747,774447774,774447777,774474444,774474447,774474474,774474477,774474744,774474747,774474774,774474777,774477444,774477447,774477474,774477477,774477744,774477747,774477774,774477777,774744444,774744447,774744474,774744477,774744744,774744747,774744774,774744777,774747444,774747447,774747474,774747477,774747744,774747747,774747774,774747777,774774444,774774447,774774474,774774477,774774744,774774747,774774774,774774777,774777444,774777447,774777474,774777477,774777744,774777747,774777774,774777777,777444444,777444447,777444474,777444477,777444744,777444747,777444774,777444777,777447444,777447447,777447474,777447477,777447744,777447747,777447774,777447777,777474444,777474447,777474474,777474477,777474744,777474747,777474774,777474777,777477444,777477447,777477474,777477477,777477744,777477747,777477774,777477777,777744444,777744447,777744474,777744477,777744744,777744747,777744774,777744777,777747444,777747447,777747474,777747477,777747744,777747747,777747774,777747777,777774444,777774447,777774474,777774477,777774744,777774747,777774774,777774777,777777444,777777447,777777474,777777477,777777744,777777747,777777774,777777777&#125;; int n,ans;int main()&#123; cin&gt;&gt;n; for(int i=1;i&lt;=1022;i++)&#123; if(n&gt;a[i]) ans=i; &#125; cout&lt;&lt;ans&lt;&lt;endl;&#125;","categories":[],"tags":[]},{"title":"Codeforce 534B Covered Path （贪心）No.4","slug":"04_534B","date":"2018-08-26T10:26:43.054Z","updated":"2018-08-26T10:30:23.508Z","comments":true,"path":"2018/08/26/04_534B/","link":"","permalink":"http://yoursite.com/2018/08/26/04_534B/","excerpt":"","text":"Covered Path传送The on-board computer on Polycarp’s car measured that the car speed at the beginning of some section of the path equals v1 meters per second, and in the end it is v2 meters per second. We know that this section of the route took exactly t seconds to pass. Assuming that at each of the seconds the speed is constant, and between seconds the speed can change at most by d meters per second in absolute value (i.e., the difference in the speed of any two adjacent seconds does not exceed d in absolute value), find the maximum possible length of the path section in meters. InputThe first line contains two integers v1 and v2 (1 ≤ v1, v2 ≤ 100) — the speeds in meters per second at the beginning of the segment and at the end of the segment, respectively. The second line contains two integers t (2 ≤ t ≤ 100) — the time when the car moves along the segment in seconds, d (0 ≤ d ≤ 10) — the maximum value of the speed change between adjacent seconds. It is guaranteed that there is a way to complete the segment so that: the speed in the first second equals v1,the speed in the last second equals v2,the absolute value of difference of speeds between any two adjacent seconds doesn’t exceed d. OutputPrint the maximum possible length of the path segment in meters. Examplesinput 5 64 2 output 26 input 10 10 10 0 output 100 NoteIn the first sample the sequence of speeds of Polycarpus’ car can look as follows: 5, 7, 8, 6. Thus, the total path is 5 + 7 + 8 + 6 = 26 meters. In the second sample, as d = 0, the car covers the whole segment at constant speed v = 10. In t = 10 seconds it covers the distance of 100 meters. 题目大意：初速度v1 末速度v2 一共t秒 速度每秒能改变[-d,+d]（注意是瞬间改变速度，牛顿的棺材板要压不住了）问最远距离 做法：先一个劲的加速 加速的时候要注意能不能回到v2 代码：12345678910111213141516171819202122#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;int v1,v2,t,d,ans;int read()&#123; int res=0,w=1;char ch=getchar(); while(!isdigit(ch)&amp;&amp;ch!='-') ch=getchar(); if(ch=='-') w=-1,ch=getchar(); while(isdigit(ch)) res=res*10+ch-'0',ch=getchar(); return res*w; &#125;int main()&#123; v1=read(); v2=read(); t=read(); d=read(); for(int i=0;i&lt;=t-1;i++)&#123; ans+=min(v1+i*d,v2+(t-i-1)*d); &#125; printf(\"%d\\n\",ans); return 0;&#125;","categories":[],"tags":[]},{"title":"Codeforce 4A Watermelon （模拟水题）No.3","slug":"03_4A","date":"2018-08-22T16:29:58.918Z","updated":"2018-08-26T10:30:59.132Z","comments":true,"path":"2018/08/23/03_4A/","link":"","permalink":"http://yoursite.com/2018/08/23/03_4A/","excerpt":"","text":"Watermelon传送One hot summer day Pete and his friend Billy decided to buy a watermelon. They chose the biggest and the ripest one, in their opinion. After that the watermelon was weighed, and the scales showed w kilos. They rushed home, dying of thirst, and decided to divide the berry, however they faced a hard problem. Pete and Billy are great fans of even numbers, that’s why they want to divide the watermelon in such a way that each of the two parts weighs even number of kilos, at the same time it is not obligatory that the parts are equal. The boys are extremely tired and want to start their meal as soon as possible, that’s why you should help them and find out, if they can divide the watermelon in the way they want. For sure, each of them should get a part of positive weight. InputThe first (and the only) input line contains integer number w (1 ≤ w ≤ 100) — the weight of the watermelon bought by the boys. OutputPrint YES, if the boys can divide the watermelon into two parts, each of them weighing even number of kilos; and NO in the opposite case. Examplesinput 8 output YES NoteFor example, the boys can divide the watermelon into two parts of 2 and 6 kilos respectively (another variant — two parts of 4 and 4 kilos). 题目大意：给出一个数n 询问其是否能拆成两个偶数之和一开始理解错题意了 做法：偶数=偶数+偶数 （2需要特判） ps：要好好学英语呀！ 1234567891011121314151617#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;int read()&#123; int res=0,w=1;char ch=getchar(); while(!isdigit(ch)&amp;&amp;ch!='-') ch=getchar(); if(ch=='-') w=-1,ch=getchar(); while(isdigit(ch)) res=res*10+ch-'0',ch=getchar(); return res*w; &#125;int main()&#123; int n; n=read(); if(n!=2&amp;&amp;n%2==0) printf(\"YES\\n\"); else printf(\"NO\\n\"); return 0;&#125;","categories":[],"tags":[]},{"title":"Codeforce 118A String Task （字符串）No.2","slug":"02_118A","date":"2018-08-22T10:49:01.119Z","updated":"2018-08-26T10:30:39.632Z","comments":true,"path":"2018/08/22/02_118A/","link":"","permalink":"http://yoursite.com/2018/08/22/02_118A/","excerpt":"","text":"String Task传送Petya started to attend programming lessons. On the first lesson his task was to write a simple program. The program was supposed to do the following: in the given string, consisting if uppercase and lowercase Latin letters, it: deletes all the vowels,inserts a character “.” before each consonant,replaces all uppercase consonants with corresponding lowercase ones.Vowels are letters “A”, “O”, “Y”, “E”, “U”, “I”, and the rest are consonants. The program’s input is exactly one string, it should return the output as a single string, resulting after the program’s processing the initial string. Help Petya cope with this easy task. InputThe first line represents input string of Petya’s program. This string only consists of uppercase and lowercase Latin letters and its length is from 1 to 100, inclusive. OutputPrint the resulting string. It is guaranteed that this string is not empty. Examplesinput tour output .t.r input Codeforces output .c.d.f.r.c.s input aBAcAba output .b.c.b 题目大意： 字符串处理 只留辅音字母 每个字母变小写 每个辅音字母前面加”.” 做法： 手写 tolowercase函数(大写字母和小写字母ASCII码差32) “y”是半元音！！！！！！！！！！！！没去掉还能A到note15 12345678910111213141516171819202122232425#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;using namespace std;string s;string tolowercase(string str)&#123; for(int i=0;i&lt;str.size();i++)&#123; if(str[i]&gt;='A'&amp;&amp;str[i]&lt;='Z')&#123; str[i]+=32; &#125; &#125; return str;&#125;int main()&#123; cin&gt;&gt;s; s=tolowercase(s); for(int i=0;i&lt;s.size();i++)&#123; if(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u'||s[i]=='y') continue; else if(s[i]&lt;='z'&amp;&amp;s[i]&gt;='a')&#123; cout&lt;&lt;\".\"&lt;&lt;s[i]; &#125; &#125; cout&lt;&lt;endl; return 0;&#125;","categories":[],"tags":[]},{"title":"Codefoce 158A Next Round （模拟水题) No.1","slug":"01_158A","date":"2018-08-22T09:53:09.340Z","updated":"2018-08-26T10:30:45.232Z","comments":true,"path":"2018/08/22/01_158A/","link":"","permalink":"http://yoursite.com/2018/08/22/01_158A/","excerpt":"","text":"Next Round传送“Contestant who earns a score equal to or greater than the k-th place finisher’s score will advance to the next round, as long as the contestant earns a positive score…” — an excerpt from contest rules. A total of n participants took part in the contest (n ≥ k), and you already know their scores. Calculate how many participants will advance to the next round. InputThe first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 50) separated by a single space. The second line contains n space-separated integers a1, a2, …, an (0 ≤ ai ≤ 100), where ai is the score earned by the participant who got the i-th place. The given sequence is non-increasing (that is, for all i from 1 to n - 1 the following condition is fulfilled: ai ≥ ai + 1). OutputOutput the number of participants who advance to the next round. Examplesinput 8 510 9 8 7 7 7 5 5 output 6 input 4 20 0 0 0 output 0 NoteIn the first example the participant on the 5th place earned 7 points. As the participant on the 6th place also earned 7 points, there are 6 advancers. In the second example nobody got a positive score. 题目大意：有n个人的得分 取前k名晋级 要求得分必须大于零才能晋级 求晋级人数 做法：模拟水题 注意有相同得分 和 全是负分的情况 代码：123456789101112131415161718192021222324252627282930313233#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;using namespace std;const int SIZE=10010;int a[SIZE];int n,k,ans,p; int read()&#123; int res=0,w=1;char ch; while(!isdigit(ch)&amp;&amp;ch!='-') ch=getchar(); if(ch=='-') w=-1,ch=getchar(); while(isdigit(ch)) res=res*10+ch-'0',ch=getchar(); return res*w;&#125;bool cmp(int a,int b)&#123; return a&gt;b;&#125;int main()&#123; n=read();k=read(); for(int i=1;i&lt;=n;i++)&#123; a[i]=read(); &#125; sort(a+1,a+n+1,cmp); p=a[k]; for(int i=1;i&lt;=n;i++)&#123; if(a[i]&gt;0&amp;&amp;a[i]&gt;=p) ans++; else break; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;","categories":[],"tags":[]}]}